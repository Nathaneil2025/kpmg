name: infra + dbp + helm

on:
  workflow_dispatch:   # ✅ only manual trigger

jobs:
  infra:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Detect & force-unlock Terraform state if locked
        working-directory: infra
        run: |
          echo "Checking if Terraform state is locked…"
          terraform plan -lock-timeout=0 > plan.out 2>&1 || true

          if grep -q "Error acquiring the state lock" plan.out; then
            echo "State appears locked; extracting lock ID…"
            sed 's/│//g' plan.out > plan.clean

            LOCK_ID=$(
              awk '
                /Lock Info:/ {inblock=1; next}
                inblock && /^$/ {inblock=0}
                inblock && /ID:[[:space:]]*/ {
                  line=$0
                  sub(/^.*ID:[[:space:]]*/, "", line)
                  split(line, a, /[[:space:]]+/)
                  print a[1]
                  exit
                }
              ' plan.clean
            )

            if [ -n "$LOCK_ID" ]; then
              echo "Unlocking with ID: $LOCK_ID"
              terraform force-unlock -force "$LOCK_ID" || true
            else
              echo "❌ Could not parse lock ID. Lock block:"
              sed -n '/Lock Info:/,/^$/p' plan.clean || true
              exit 1
            fi
          else
            echo "✅ No active lock found. Skipping unlock."
          fi

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_github_oidc_principal_id: ${{ secrets.AZURE_CLIENT_OBJECT_ID }}

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_github_oidc_principal_id: ${{ secrets.AZURE_CLIENT_OBJECT_ID }}

  build_push:
    runs-on: ubuntu-latest
    needs: infra
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get ACR login server
        id: acr
        run: echo "login_server=acrcandidates.azurecr.io" >> $GITHUB_OUTPUT

      - name: Docker Login to ACR
        run: az acr login --name acrcandidates --resource-group ai-candidates

      - name: Build & Tag Docker Image
        run: |
          VERSION=$(az acr repository show-tags \
            --name acrcandidates \
            --resource-group ai-candidates \
            --repository chatbot-service \
            --query "[-1]" -o tsv || echo "")

          if [ -z "$VERSION" ]; then
            VERSION=1
          else
            VERSION=$((VERSION+1))
          fi

          IMAGE=acrcandidates.azurecr.io/chatbot-service:$VERSION
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          docker build -t $IMAGE ./app
          docker push $IMAGE

  helm_deploy:
    runs-on: ubuntu-latest
    needs: build_push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install kubectl & Helm
        run: |
          az aks install-cli
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group platform_candidate_2 \
            --name chatbot-aks \
            --overwrite-existing

      - name: Install AGIC (App Gateway Ingress Controller)
        run: |
          helm repo add ingress-appgw https://azure.github.io/application-gateway-kubernetes-ingress/helm
          helm repo update
          helm upgrade --install agic ingress-appgw/ingress-azure \
            --namespace kube-system \
            --set appgw.subscriptionId=${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --set appgw.resourceGroup=platform_candidate_2 \
            --set appgw.name=chatbot-appgw \
            --set armAuth.type=msi \
            --set armAuth.identityId=$(az identity show --name chatbot-aks-identity --resource-group platform_candidate_2 --query id -o tsv) \
            --set rbac.enabled=true

      - name: Deploy Chatbot via Helm
        run: |
          helm upgrade --install chatbot ./helm/chatbot \
            --namespace chatbot --create-namespace \
            --set image.repository=acrcandidates.azurecr.io/chatbot-service \
            --set image.tag=${{ env.VERSION }}
