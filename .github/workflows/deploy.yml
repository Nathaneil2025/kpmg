name: infra + build + push + helm

on:
  workflow_dispatch:   # âœ… manual trigger only

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: platform_candidate_2
      CLUSTER_NAME: chatbot-aks
      ACR_NAME: myacrtask   # short ACR name (login server = myacrtask.azurecr.io)

    steps:
      # ---------------------
      # Checkout code
      # ---------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # ---------------------
      # Azure Login
      # ---------------------
      - name: Azure Login (Service Principal with Secret)
        uses: azure/login@v2
        with:
          auth-type: SERVICE_PRINCIPAL
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ---------------------
      # Terraform infra
      # ---------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      # ---------------------
      # Get AKS Credentials (needed before kubectl commands)
      # ---------------------
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing

      # ---------------------
      # Step 3: Validate AGIC is running with AKS identity
      # ---------------------
      - name: Validate AGIC Controller
        run: |
          echo "Checking AGIC pod status..."
          kubectl get pods -n kube-system -l app=ingress-appgw
          echo "Checking AGIC logs..."
          kubectl logs -n kube-system -l app=ingress-appgw --tail=50 || true

      # ---------------------
      # Build & Push Image (sequential + latest)
      # ---------------------
      - name: Get next image tag
        id: get_tag
        run: |
          TAGS=$(az acr repository show-tags \
            --name ${{ env.ACR_NAME }} \
            --repository chatbot-app \
            --output tsv 2>/dev/null || echo "")

          if [ -z "$TAGS" ]; then
            NEXT_TAG="ver1"
          else
            LAST_NUM=$(echo "$TAGS" | grep -Eo 'ver[0-9]+' | sed 's/ver//' | sort -n | tail -1)
            NEXT_NUM=$((LAST_NUM + 1))
            NEXT_TAG="ver${NEXT_NUM}"
          fi

          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
          echo "Using tag: $NEXT_TAG"

      - name: ACR Login (via SP)
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Build and Push Docker image
        run: |
          IMAGE=${{ env.ACR_NAME }}.azurecr.io/chatbot-app
          echo "Building and pushing $IMAGE:${{ env.NEXT_TAG}} and :latest"
          docker build -t $IMAGE:${{ env.NEXT_TAG }} -t $IMAGE:latest .
          docker push $IMAGE:${{ env.NEXT_TAG }}
          docker push $IMAGE:latest

      # ---------------------
      # Helm Deploy
      # ---------------------
      - name: Deploy with Helm
        run: |
          helm upgrade --install chatbot ./helm \
            --set image.repository=${{ env.ACR_NAME }}.azurecr.io/chatbot-app \
            --set image.tag=latest \
            --set image.pullPolicy=Always \
            --set app.env.AOAI_ENDPOINT="https://aoai-candidates-east-us-2.openai.azure.com" \
            --set app.env.AOAI_DEPLOYMENT="gpt-4o" \
            --set app.env.AOAI_API_KEY="${{ secrets.AOAI_API_KEY }}" \
            --set app.env.REDIS_URL="rediss://:${{ secrets.REDIS_ACCESS_KEY }}@chatbot-redis-2025.redis.cache.windows.net:6380"