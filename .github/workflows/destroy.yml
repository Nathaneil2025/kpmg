name: Destroy Chatbot Infra + App new

on:
  workflow_dispatch:   # ✅ manual trigger only

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: infra
      RESOURCE_GROUP: platform_candidate_2
      CLUSTER_NAME: chatbot-aks
      REGION: eastus2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials -g $RESOURCE_GROUP -n $CLUSTER_NAME --overwrite-existing
        continue-on-error: true

      - name: Uninstall Helm Releases
        run: |
          helm uninstall chatbot -n chatbot || true
          helm uninstall agic -n kube-system || true
        continue-on-error: true

      - name: Scale down node pool
        run: |
          az aks nodepool scale \
            --cluster-name $CLUSTER_NAME \
            --resource-group $RESOURCE_GROUP \
            --name systempool \
            --node-count 0 || true
        continue-on-error: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Detect & force-unlock Terraform state if locked
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Checking if Terraform state is locked…"
          terraform plan -lock-timeout=0 > plan.out 2>&1 || true

          if grep -q "Error acquiring the state lock" plan.out; then
            echo "State appears locked; extracting lock ID…"
            sed 's/│//g' plan.out > plan.clean

            LOCK_ID=$(
              awk '
                /Lock Info:/ {inblock=1; next}
                inblock && /^$/ {inblock=0}
                inblock && /ID:[[:space:]]*/ {
                  line=$0
                  sub(/^.*ID:[[:space:]]*/, "", line)
                  split(line, a, /[[:space:]]+/)
                  print a[1]
                  exit
                }
              ' plan.clean
            )

            if [ -n "$LOCK_ID" ]; then
              echo "Unlocking with ID: $LOCK_ID"
              terraform force-unlock -force "$LOCK_ID" || true
            else
              echo "❌ Could not parse lock ID. Lock block:"
              sed -n '/Lock Info:/,/^$/p' plan.clean || true
              exit 1
            fi
          else
            echo "✅ No active lock found. Skipping unlock."
          fi

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_github_oidc_principal_id: ${{ secrets.AZURE_CLIENT_OBJECT_ID }}
